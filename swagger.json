{
  "openapi": "3.0.0",
  "info": {
    "title": "AdonisTest",
    "version": "0.0.1",
    "description": "I'm just learning this framework"
  },
  "components": {
    "responses": {
      "Forbidden": {
        "description": "Access token is missing or invalid"
      },
      "Accepted": {
        "description": "The request was accepted"
      },
      "Created": {
        "description": "The resource has been created"
      },
      "NotFound": {
        "description": "The resource has been created"
      },
      "NotAcceptable": {
        "description": "The resource has been created"
      }
    },
    "securitySchemes": {
      "BearerAuth": {
        "type": "http",
        "scheme": "bearer"
      },
      "BasicAuth": {
        "type": "http",
        "scheme": "basic"
      },
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "X-API-Key"
      }
    },
    "schemas": {
      "Any": {
        "description": "Any JSON object not defined as schema"
      },
      "PaginationMeta": {
        "type": "object",
        "properties": {
          "total": {
            "type": "number",
            "example": 100,
            "nullable": false
          },
          "page": {
            "type": "number",
            "example": 2,
            "nullable": false
          },
          "perPage": {
            "type": "number",
            "example": 10,
            "nullable": false
          },
          "currentPage": {
            "type": "number",
            "example": 3,
            "nullable": false
          },
          "lastPage": {
            "type": "number",
            "example": 10,
            "nullable": false
          },
          "firstPage": {
            "type": "number",
            "example": 1,
            "nullable": false
          },
          "lastPageUrl": {
            "type": "string",
            "example": "/?page=10",
            "nullable": false
          },
          "firstPageUrl": {
            "type": "string",
            "example": "/?page=1",
            "nullable": false
          },
          "nextPageUrl": {
            "type": "string",
            "example": "/?page=6",
            "nullable": false
          },
          "previousPageUrl": {
            "type": "string",
            "example": "/?page=5",
            "nullable": false
          }
        }
      },
      "Category": {
        "type": "object",
        "required": [],
        "properties": {
          "id": {
            "type": "number",
            "example": 48
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "products": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product",
              "example": null
            }
          },
          "createdAt": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          }
        },
        "description": "Category (Model)"
      },
      "Product": {
        "type": "object",
        "required": [],
        "properties": {
          "id": {
            "type": "number",
            "example": 139
          },
          "name": {
            "type": "string",
            "example": "John Doe"
          },
          "price": {
            "type": "number",
            "example": 10.5
          },
          "description": {
            "type": "string",
            "example": "Lorem ipsum dolor sit amet"
          },
          "status": {
            "type": "string",
            "example": "Активен",
            "enum": [
              "Активен",
              "Вожидании",
              "Приостановлен"
            ]
          },
          "imagePath": {
            "type": "string",
            "example": "Lorem Ipsum"
          },
          "categories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category",
              "example": null
            }
          },
          "inCartOfUsers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/User",
              "example": null
            }
          },
          "createdAt": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          }
        },
        "description": "Product (Model)"
      },
      "User": {
        "type": "object",
        "required": [],
        "properties": {
          "id": {
            "type": "number",
            "example": 681
          },
          "fullName": {
            "type": "string",
            "example": "John Doe"
          },
          "email": {
            "type": "string",
            "example": "johndoe@example.com",
            "format": "email"
          },
          "createdAt": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "example": "2021-03-23T16:13:08.489+01:00",
            "format": "date-time"
          },
          "isVerified": {
            "type": "boolean",
            "example": true
          },
          "emailTokenConfirmation": {
            "type": "string",
            "example": "Lorem Ipsum"
          },
          "provider": {
            "type": "string",
            "example": "Lorem Ipsum"
          },
          "providerId": {
            "type": "string",
            "example": "Lorem Ipsum"
          },
          "cartItems": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Product",
              "example": null
            }
          }
        },
        "description": "User (Model)"
      },
      "createCategoryValidator": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Lorem Ipsum",
            "required": true
          }
        },
        "example": {
          "name": "Lorem Ipsum"
        },
        "description": "createCategoryValidator (Validator)"
      },
      "attachCategoriesValidator": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "number",
              "example": 658
            },
            "required": true
          }
        },
        "example": {
          "categories": [
            658
          ]
        },
        "description": "attachCategoriesValidator (Validator)"
      },
      "createProductValidator": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "example": "Lorem Ipsum",
            "required": true
          },
          "price": {
            "type": "number",
            "example": 748,
            "required": true
          },
          "description": {
            "type": "string",
            "example": "Lorem Ipsum",
            "required": true
          },
          "image": {
            "type": "number",
            "example": 961,
            "required": true
          },
          "categories": {
            "type": "array",
            "items": {
              "type": "number",
              "example": 642
            },
            "required": true
          }
        },
        "example": {
          "name": "Lorem Ipsum",
          "price": 748,
          "description": "Lorem Ipsum",
          "image": 961,
          "categories": [
            642
          ]
        },
        "description": "createProductValidator (Validator)"
      },
      "changeEmailValidator": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "Lorem Ipsum",
            "required": true
          }
        },
        "example": {
          "email": "Lorem Ipsum"
        },
        "description": "changeEmailValidator (Validator)"
      },
      "changeFullNameValidator": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "example": "Lorem Ipsum",
            "pattern": "/^[А-яёЁ -]*$/u",
            "required": true
          }
        },
        "example": {
          "fullName": "Lorem Ipsum"
        },
        "description": "changeFullNameValidator (Validator)"
      },
      "changePasswordValidator": {
        "type": "object",
        "properties": {
          "old_password": {
            "type": "string",
            "example": "Lorem Ipsum",
            "required": true
          },
          "new_password": {
            "type": "string",
            "example": "Lorem Ipsum",
            "pattern": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/",
            "required": true
          }
        },
        "example": {
          "old_password": "Lorem Ipsum",
          "new_password": "Lorem Ipsum"
        },
        "description": "changePasswordValidator (Validator)"
      },
      "createUserValidator": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "Lorem Ipsum",
            "required": true
          },
          "fullName": {
            "type": "string",
            "example": "Lorem Ipsum",
            "pattern": "/^[А-яёЁ -]*$/u",
            "required": true
          },
          "password": {
            "type": "string",
            "example": "Lorem Ipsum",
            "pattern": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/",
            "required": true,
            "minLength": 8
          }
        },
        "example": {
          "email": "Lorem Ipsum",
          "fullName": "Lorem Ipsum",
          "password": "Lorem Ipsum"
        },
        "description": "createUserValidator (Validator)"
      },
      "loginUserValidator": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "example": "Lorem Ipsum",
            "required": true
          },
          "password": {
            "type": "string",
            "example": "Lorem Ipsum",
            "pattern": "/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/",
            "required": true,
            "minLength": 8
          }
        },
        "example": {
          "email": "Lorem Ipsum",
          "password": "Lorem Ipsum"
        },
        "description": "loginUserValidator (Validator)"
      }
    }
  },
  "paths": {
    "/uploads/*": {
      "get": {
        "summary": "route",
        "description": "\n\n __ - ****",
        "parameters": [],
        "tags": [
          "*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      }
    },
    "/": {
      "get": {
        "summary": "route",
        "description": "\n\n __ - ****",
        "parameters": [],
        "tags": [],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      }
    },
    "/products": {
      "get": {
        "summary": "Get all active products in system (index)",
        "description": "Returns **200** (OK) as **application/json**\n\n _app/controllers/product/products_controller.ts_ - **index**",
        "parameters": [
          {
            "in": "query",
            "name": "page",
            "description": "the Page number",
            "schema": {
              "example": "",
              "type": "number"
            },
            "required": false
          }
        ],
        "tags": [
          "PRODUCT"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Product"
                      }
                    },
                    "meta": {
                      "$ref": "#/components/schemas/PaginationMeta"
                    }
                  }
                },
                "example": {
                  "data": [
                    {
                      "id": 139,
                      "name": "John Doe",
                      "price": 10.5,
                      "description": "Lorem ipsum dolor sit amet",
                      "status": "Активен",
                      "imagePath": "Lorem Ipsum",
                      "categories": [
                        {
                          "id": 48,
                          "name": "John Doe",
                          "createdAt": "2021-03-23T16:13:08.489+01:00",
                          "updatedAt": "2021-03-23T16:13:08.489+01:00"
                        }
                      ],
                      "createdAt": "2021-03-23T16:13:08.489+01:00",
                      "updatedAt": "2021-03-23T16:13:08.489+01:00"
                    }
                  ],
                  "meta": {
                    "total": 100,
                    "page": 2,
                    "perPage": 10,
                    "currentPage": 3,
                    "lastPage": 10,
                    "firstPage": 1,
                    "lastPageUrl": "/?page=10",
                    "firstPageUrl": "/?page=1",
                    "nextPageUrl": "/?page=6",
                    "previousPageUrl": "/?page=5"
                  }
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": []
      },
      "post": {
        "summary": "Create product (store)",
        "description": "Returns **201** (Created) as **application/json**\n\n _app/controllers/product/products_controller.ts_ - **store**",
        "parameters": [],
        "tags": [
          "PRODUCT"
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                },
                "example": {
                  "id": 139,
                  "name": "John Doe",
                  "price": 10.5,
                  "description": "Lorem ipsum dolor sit amet",
                  "status": "Активен",
                  "imagePath": "Lorem Ipsum",
                  "createdAt": "2021-03-23T16:13:08.489+01:00",
                  "updatedAt": "2021-03-23T16:13:08.489+01:00"
                }
              }
            },
            "description": "Returns **201** (Created) as **application/json**"
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createProductValidator"
              },
              "example": {
                "name": "Lorem Ipsum",
                "price": 748,
                "description": "Lorem Ipsum",
                "image": 961,
                "categories": [
                  642
                ]
              }
            }
          }
        }
      }
    },
    "/products/create": {
      "get": {
        "summary": "Create (Frontend) create (create)",
        "description": "\n\n _app/controllers/product/products_controller.ts_ - **create**",
        "parameters": [],
        "tags": [
          "CREATE"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      }
    },
    "/products/{id}": {
      "get": {
        "summary": "Get product by id (show)",
        "description": "Returns **200** (OK) as **application/json**\n\n _app/controllers/product/products_controller.ts_ - **show**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Product's id",
            "schema": {
              "example": "",
              "type": "number"
            },
            "required": false
          }
        ],
        "tags": [
          "PRODUCT"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                },
                "example": {
                  "id": 139,
                  "name": "John Doe",
                  "price": 10.5,
                  "description": "Lorem ipsum dolor sit amet",
                  "status": "Активен",
                  "imagePath": "Lorem Ipsum",
                  "createdAt": "2021-03-23T16:13:08.489+01:00",
                  "updatedAt": "2021-03-23T16:13:08.489+01:00"
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Update :id (update)",
        "description": "\n\n _app/controllers/product/products_controller.ts_ - **update**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          ":ID"
        ],
        "responses": {
          "undefined": {
            "description": "Unknown",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {}
          }
        }
      },
      "delete": {
        "summary": "Delete :id (destroy)",
        "description": "\n\n _app/controllers/product/products_controller.ts_ - **destroy**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          ":ID"
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      }
    },
    "/products/{id}/edit": {
      "get": {
        "summary": "Update (Frontend) :id (edit)",
        "description": "\n\n _app/controllers/product/products_controller.ts_ - **edit**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          ":ID"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      }
    },
    "/products/update-status/{id}": {
      "post": {
        "summary": "Update status of product (handle)",
        "description": "Here we have implementation of product's status transitions. All the way: Pending -> Active -> Suspended, Suspended -> Active\n\n _app/controllers/product/update_product_status_controller.ts_ - **handle**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Product's id",
            "schema": {
              "example": "",
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          "PRODUCT"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": "Product status changed successfully",
                    "user": {
                      "$ref": "#/components/schemas/Product"
                    }
                  }
                },
                "example": {
                  "message": "Product status changed successfully",
                  "user": {
                    "id": 139,
                    "name": "John Doe",
                    "price": 10.5,
                    "description": "Lorem ipsum dolor sit amet",
                    "status": "Активен",
                    "imagePath": "Lorem Ipsum",
                    "createdAt": "2021-03-23T16:13:08.489+01:00",
                    "updatedAt": "2021-03-23T16:13:08.489+01:00"
                  }
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": []
      }
    },
    "/products/attach-categories/{id}": {
      "post": {
        "summary": "Attach categories (ids) to product (handle)",
        "description": "\n\n _app/controllers/product/attach_categories_to_product_controller.ts_ - **handle**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Product's id",
            "schema": {
              "example": "",
              "type": "number"
            },
            "required": false
          }
        ],
        "tags": [
          "PRODUCT"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                },
                "example": {
                  "id": 139,
                  "name": "John Doe",
                  "price": 10.5,
                  "description": "Lorem ipsum dolor sit amet",
                  "status": "Активен",
                  "imagePath": "Lorem Ipsum",
                  "categories": [
                    {
                      "id": 48,
                      "name": "John Doe",
                      "createdAt": "2021-03-23T16:13:08.489+01:00",
                      "updatedAt": "2021-03-23T16:13:08.489+01:00"
                    }
                  ],
                  "createdAt": "2021-03-23T16:13:08.489+01:00",
                  "updatedAt": "2021-03-23T16:13:08.489+01:00"
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attachCategoriesValidator"
              },
              "example": {
                "categories": [
                  658
                ]
              }
            }
          }
        }
      }
    },
    "/products/detach-categories/{id}": {
      "post": {
        "summary": "Detach categories (ids) from product (handle)",
        "description": "\n\n _app/controllers/product/detach_categories_from_product_controller.ts_ - **handle**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Product's id",
            "schema": {
              "example": "",
              "type": "number"
            },
            "required": false
          }
        ],
        "tags": [
          "PRODUCT"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Product"
                },
                "example": {
                  "id": 139,
                  "name": "John Doe",
                  "price": 10.5,
                  "description": "Lorem ipsum dolor sit amet",
                  "status": "Активен",
                  "imagePath": "Lorem Ipsum",
                  "categories": [
                    {
                      "id": 48,
                      "name": "John Doe",
                      "createdAt": "2021-03-23T16:13:08.489+01:00",
                      "updatedAt": "2021-03-23T16:13:08.489+01:00"
                    }
                  ],
                  "createdAt": "2021-03-23T16:13:08.489+01:00",
                  "updatedAt": "2021-03-23T16:13:08.489+01:00"
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/attachCategoriesValidator"
              },
              "example": {
                "categories": [
                  658
                ]
              }
            }
          }
        }
      }
    },
    "/cart/{id}": {
      "post": {
        "summary": "Add product to cart by its id (handle)",
        "description": "\n\n _app/controllers/product/add_product_to_cart_controller.ts_ - **handle**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "description": "Product's id",
            "schema": {
              "example": "",
              "type": "number"
            },
            "required": false
          }
        ],
        "tags": [
          "CART"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "product": {
                      "$ref": "#/components/schemas/Product"
                    },
                    "total": "15"
                  }
                },
                "example": {
                  "product": {
                    "id": 139,
                    "name": "John Doe",
                    "price": 10.5,
                    "description": "Lorem ipsum dolor sit amet",
                    "status": "Активен",
                    "imagePath": "Lorem Ipsum",
                    "createdAt": "2021-03-23T16:13:08.489+01:00",
                    "updatedAt": "2021-03-23T16:13:08.489+01:00"
                  },
                  "total": "15"
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          },
          "401": {
            "description": "Returns **401** (Unauthorized)"
          },
          "403": {
            "description": "Returns **403** (Forbidden)"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "access"
            ]
          }
        ]
      }
    },
    "/cart": {
      "get": {
        "summary": "Show products in user's cart (handle)",
        "description": "Returns **200** (OK) as **application/json**\n\n _app/controllers/product/get_products_in_cart_controller.ts_ - **handle**",
        "parameters": [],
        "tags": [
          "CART"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Product"
                  }
                },
                "example": [
                  {
                    "id": 139,
                    "name": "John Doe",
                    "price": 10.5,
                    "description": "Lorem ipsum dolor sit amet",
                    "status": "Активен",
                    "imagePath": "Lorem Ipsum",
                    "categories": [
                      {
                        "id": 48,
                        "name": "John Doe",
                        "createdAt": "2021-03-23T16:13:08.489+01:00",
                        "updatedAt": "2021-03-23T16:13:08.489+01:00"
                      }
                    ],
                    "createdAt": "2021-03-23T16:13:08.489+01:00",
                    "updatedAt": "2021-03-23T16:13:08.489+01:00"
                  }
                ]
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          },
          "401": {
            "description": "Returns **401** (Unauthorized)"
          },
          "403": {
            "description": "Returns **403** (Forbidden)"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "access"
            ]
          }
        ]
      }
    },
    "/categories": {
      "get": {
        "summary": "Get all categories (index)",
        "description": "Returns **200** (OK) as **application/json**\n\n _app/controllers/category/categories_controller.ts_ - **index**",
        "parameters": [],
        "tags": [
          "CATEGORY"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                },
                "example": [
                  {
                    "id": 48,
                    "name": "John Doe",
                    "createdAt": "2021-03-23T16:13:08.489+01:00",
                    "updatedAt": "2021-03-23T16:13:08.489+01:00"
                  }
                ]
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": []
      },
      "post": {
        "summary": "Create category (store)",
        "description": "Returns **201** (Created) as **application/json**\n\n _app/controllers/category/categories_controller.ts_ - **store**",
        "parameters": [],
        "tags": [
          "CATEGORY"
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Category"
                },
                "example": {
                  "id": 48,
                  "name": "John Doe",
                  "createdAt": "2021-03-23T16:13:08.489+01:00",
                  "updatedAt": "2021-03-23T16:13:08.489+01:00"
                }
              }
            },
            "description": "Returns **201** (Created) as **application/json**"
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createCategoryValidator"
              },
              "example": {
                "name": "Lorem Ipsum"
              }
            }
          }
        }
      }
    },
    "/categories/create": {
      "get": {
        "summary": "Create (Frontend) create (create)",
        "description": "\n\n _app/controllers/category/categories_controller.ts_ - **create**",
        "parameters": [],
        "tags": [
          "CREATE"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      }
    },
    "/categories/{id}": {
      "get": {
        "summary": "Get a single instance of :id (show)",
        "description": "\n\n _app/controllers/category/categories_controller.ts_ - **show**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          ":ID"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      },
      "patch": {
        "summary": "Update :id (update)",
        "description": "\n\n _app/controllers/category/categories_controller.ts_ - **update**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          ":ID"
        ],
        "responses": {
          "undefined": {
            "description": "Unknown",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {}
          }
        }
      },
      "delete": {
        "summary": "Delete :id (destroy)",
        "description": "\n\n _app/controllers/category/categories_controller.ts_ - **destroy**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          ":ID"
        ],
        "responses": {
          "202": {
            "description": "Accepted",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      }
    },
    "/categories/{id}/edit": {
      "get": {
        "summary": "Update (Frontend) :id (edit)",
        "description": "\n\n _app/controllers/category/categories_controller.ts_ - **edit**",
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "tags": [
          ":ID"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      }
    },
    "/categories-with-last-products": {
      "get": {
        "summary": "Show categories and 3 last products of each (handle)",
        "description": "Returns **200** (OK) as **application/json**\n\n _app/controllers/category/get_categories_with_last_three_products.ts_ - **handle**",
        "parameters": [],
        "tags": [
          "CATEGORY"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Category"
                  }
                },
                "example": [
                  {
                    "id": 48,
                    "name": "John Doe",
                    "products": [
                      {
                        "id": 139,
                        "name": "John Doe",
                        "price": 10.5,
                        "description": "Lorem ipsum dolor sit amet",
                        "status": "Активен",
                        "imagePath": "Lorem Ipsum",
                        "createdAt": "2021-03-23T16:13:08.489+01:00",
                        "updatedAt": "2021-03-23T16:13:08.489+01:00"
                      }
                    ],
                    "createdAt": "2021-03-23T16:13:08.489+01:00",
                    "updatedAt": "2021-03-23T16:13:08.489+01:00"
                  }
                ]
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": []
      }
    },
    "/signup": {
      "post": {
        "summary": " (signup)",
        "description": "Returns **201** (Created) as **application/json**\n\n _app/controllers/user/users_controller.ts_ - **signup**",
        "parameters": [],
        "tags": [
          "USER"
        ],
        "responses": {
          "201": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                },
                "example": {
                  "id": 681,
                  "fullName": "John Doe",
                  "email": "johndoe@example.com",
                  "createdAt": "2021-03-23T16:13:08.489+01:00",
                  "updatedAt": "2021-03-23T16:13:08.489+01:00",
                  "isVerified": true,
                  "emailTokenConfirmation": "Lorem Ipsum",
                  "provider": "Lorem Ipsum",
                  "providerId": "Lorem Ipsum"
                }
              }
            },
            "description": "Returns **201** (Created) as **application/json**"
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/createUserValidator"
              },
              "example": {
                "email": "Lorem Ipsum",
                "fullName": "Lorem Ipsum",
                "password": "Lorem Ipsum"
              }
            }
          }
        }
      }
    },
    "/login": {
      "post": {
        "summary": " (login)",
        "description": "\n\n _app/controllers/user/users_controller.ts_ - **login**",
        "parameters": [],
        "tags": [
          "USER"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": "User login successfully",
                    "token": "xxxxxx"
                  }
                },
                "example": {
                  "message": "User login successfully",
                  "token": "xxxxxx"
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/loginUserValidator"
              },
              "example": {
                "email": "Lorem Ipsum",
                "password": "Lorem Ipsum"
              }
            }
          }
        }
      }
    },
    "/verify-email/{token}": {
      "get": {
        "summary": " (emailVerify)",
        "description": "Returns **200** (OK) as **application/json**\n\n _app/controllers/user/users_controller.ts_ - **emailVerify**",
        "parameters": [
          {
            "in": "path",
            "name": "token",
            "description": "The token of the verify",
            "schema": {
              "example": "",
              "type": "string"
            },
            "required": false
          }
        ],
        "tags": [
          "USER"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": "Email confirmed successfully"
                  }
                },
                "example": {
                  "message": "Email confirmed successfully"
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": []
      }
    },
    "/users": {
      "get": {
        "summary": "Get a list of  (index)",
        "description": "\n\n _app/controllers/user/users_controller.ts_ - **index**",
        "parameters": [],
        "tags": [
          ""
        ],
        "responses": {
          "401": {
            "description": "Returns **401** (Unauthorized)"
          },
          "403": {
            "description": "Returns **403** (Forbidden)"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "access"
            ]
          }
        ]
      }
    },
    "/users/me/change-full-name": {
      "patch": {
        "summary": " (changeFullName)",
        "description": "\n\n _app/controllers/user/users_controller.ts_ - **changeFullName**",
        "parameters": [],
        "tags": [
          "USER"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": "Full name updated successfully",
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                },
                "example": {
                  "message": "Full name updated successfully",
                  "user": {
                    "id": 681,
                    "fullName": "John Doe",
                    "email": "johndoe@example.com",
                    "createdAt": "2021-03-23T16:13:08.489+01:00",
                    "updatedAt": "2021-03-23T16:13:08.489+01:00",
                    "isVerified": true,
                    "emailTokenConfirmation": "Lorem Ipsum",
                    "provider": "Lorem Ipsum",
                    "providerId": "Lorem Ipsum"
                  }
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          },
          "401": {
            "description": "Returns **401** (Unauthorized)"
          },
          "403": {
            "description": "Returns **403** (Forbidden)"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "access"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeFullNameValidator"
              },
              "example": {
                "fullName": "Lorem Ipsum"
              }
            }
          }
        }
      }
    },
    "/users/me/change-email": {
      "patch": {
        "summary": " (changeEmail)",
        "description": "\n\n _app/controllers/user/users_controller.ts_ - **changeEmail**",
        "parameters": [],
        "tags": [
          "USER"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": "Email updated successfully, check your email for verification",
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                },
                "example": {
                  "message": "Email updated successfully, check your email for verification",
                  "user": {
                    "id": 681,
                    "fullName": "John Doe",
                    "email": "johndoe@example.com",
                    "createdAt": "2021-03-23T16:13:08.489+01:00",
                    "updatedAt": "2021-03-23T16:13:08.489+01:00",
                    "isVerified": true,
                    "emailTokenConfirmation": "Lorem Ipsum",
                    "provider": "Lorem Ipsum",
                    "providerId": "Lorem Ipsum"
                  }
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          },
          "401": {
            "description": "Returns **401** (Unauthorized)"
          },
          "403": {
            "description": "Returns **403** (Forbidden)"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "access"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changeEmailValidator"
              },
              "example": {
                "email": "Lorem Ipsum"
              }
            }
          }
        }
      }
    },
    "/users/me/change-password": {
      "patch": {
        "summary": " (changePassword)",
        "description": "\n\n _app/controllers/user/users_controller.ts_ - **changePassword**",
        "parameters": [],
        "tags": [
          "USER"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": "Password updated",
                    "user": {
                      "$ref": "#/components/schemas/User"
                    }
                  }
                },
                "example": {
                  "message": "Password updated",
                  "user": {
                    "id": 681,
                    "fullName": "John Doe",
                    "email": "johndoe@example.com",
                    "createdAt": "2021-03-23T16:13:08.489+01:00",
                    "updatedAt": "2021-03-23T16:13:08.489+01:00",
                    "isVerified": true,
                    "emailTokenConfirmation": "Lorem Ipsum",
                    "provider": "Lorem Ipsum",
                    "providerId": "Lorem Ipsum"
                  }
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          },
          "401": {
            "description": "Returns **401** (Unauthorized)"
          },
          "403": {
            "description": "Returns **403** (Forbidden)"
          }
        },
        "security": [
          {
            "BearerAuth": [
              "access"
            ]
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/changePasswordValidator"
              },
              "example": {
                "old_password": "Lorem Ipsum",
                "new_password": "Lorem Ipsum"
              }
            }
          }
        }
      }
    },
    "/{provider}/redirect": {
      "get": {
        "summary": " (redirect)",
        "description": "\n\n _app/controllers/user/oauth_controller.ts_ - **redirect**",
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "description": "The login provider to be used",
            "schema": {
              "example": "google",
              "type": "string",
              "enum": [
                "google",
                "github"
              ]
            },
            "required": false
          }
        ],
        "tags": [
          "USER"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {}
            }
          }
        },
        "security": []
      }
    },
    "/{provider}/auth/callback": {
      "get": {
        "summary": " (callback)",
        "description": "Returns **200** (OK) as **application/json**\n\n _app/controllers/user/oauth_controller.ts_ - **callback**",
        "parameters": [
          {
            "in": "path",
            "name": "provider",
            "description": "The login provider to be used",
            "schema": {
              "example": "google",
              "type": "string",
              "enum": [
                "google",
                "github"
              ]
            },
            "required": false
          }
        ],
        "tags": [
          "USER"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "user": {
                      "$ref": "#/components/schemas/User"
                    },
                    "token": "xxxxxx"
                  }
                },
                "example": {
                  "user": {
                    "id": 681,
                    "fullName": "John Doe",
                    "email": "johndoe@example.com",
                    "createdAt": "2021-03-23T16:13:08.489+01:00",
                    "updatedAt": "2021-03-23T16:13:08.489+01:00",
                    "isVerified": true,
                    "emailTokenConfirmation": "Lorem Ipsum",
                    "provider": "Lorem Ipsum",
                    "providerId": "Lorem Ipsum"
                  },
                  "token": "xxxxxx"
                }
              }
            },
            "description": "Returns **200** (OK) as **application/json**"
          }
        },
        "security": []
      }
    }
  },
  "tags": [
    {
      "name": "*",
      "description": "Everything related to *"
    },
    {
      "name": "PRODUCT",
      "description": "Everything related to PRODUCT"
    },
    {
      "name": "CREATE",
      "description": "Everything related to CREATE"
    },
    {
      "name": "PRODUCT",
      "description": "Everything related to PRODUCT"
    },
    {
      "name": ":ID",
      "description": "Everything related to :ID"
    },
    {
      "name": "PRODUCT",
      "description": "Everything related to PRODUCT"
    },
    {
      "name": "PRODUCT",
      "description": "Everything related to PRODUCT"
    },
    {
      "name": "PRODUCT",
      "description": "Everything related to PRODUCT"
    },
    {
      "name": "PRODUCT",
      "description": "Everything related to PRODUCT"
    },
    {
      "name": "CART",
      "description": "Everything related to CART"
    },
    {
      "name": "CART",
      "description": "Everything related to CART"
    },
    {
      "name": "CATEGORY",
      "description": "Everything related to CATEGORY"
    },
    {
      "name": "CATEGORY",
      "description": "Everything related to CATEGORY"
    },
    {
      "name": "CATEGORY",
      "description": "Everything related to CATEGORY"
    },
    {
      "name": "USER",
      "description": "Everything related to USER"
    },
    {
      "name": "USER",
      "description": "Everything related to USER"
    },
    {
      "name": "USER",
      "description": "Everything related to USER"
    },
    {
      "name": "USER",
      "description": "Everything related to USER"
    },
    {
      "name": "USER",
      "description": "Everything related to USER"
    },
    {
      "name": "USER",
      "description": "Everything related to USER"
    },
    {
      "name": "USER",
      "description": "Everything related to USER"
    },
    {
      "name": "USER",
      "description": "Everything related to USER"
    }
  ]
}